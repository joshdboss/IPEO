function [data_train_sc, label_train, data_valid_sc, label_valid,...
    dataMax, dataMin] = trainML(refImage, indices, labels)
%Trains a deep learning neural network on reference image and given labels
%   Prepares the data from the refImage according to the indices and labels
%   obtained from the plotRoi function. Then, trains a deep learning neural
%   network that will optimally predict the labels of the image.
%   Returns the model and prints some metrics about the network
%
%INPUTS
%   refImageData (M x N x D): Relevant data to classify the M x N image.
%   Will usually contain the indices as well as slope
%   indices (Nb_poygons x 1): Structure containing the indices of
%   pixels in each of the labelled polygons/roi
%   labels (Nb_poygons x 1): Labels of the polygons
%
%OUTPUTS
%   MLmodel: Trained network on the provided data according to the model
%   that was used.


% PREPARE DATA ============================================================

% Reshape the image into a 2d matrix
data = reshape(refImage, size(refImage,1)*size(refImage,2), ...
    size(refImage,3));

% Get pixels from each class mask (polygons)
data_roi = data(cell2mat(indices),:);
 
% concatenate the vector of labels
label_roi = [];

for c = 1:length(labels) % for each polygon
    % Create a vector with the label of the polygon class.
    label_roi = [label_roi; repmat(labels(c),size(indices{c},1),1)];
end

% Split into training and testing samples to evaluate performances
split = 0.1;
trainID = 1:10:length(label_roi);
testID = setdiff(1:length(label_roi),trainID);

% Subsample the training and the validation (test) data + labels
data_train = data_roi(trainID,:);
label_train = label_roi(trainID);

data_valid = data_roi(testID,:);
label_valid = label_roi(testID);

typeNorm = 'std'; % use 'std' to rescale to a unit variance and zero mean
[data_train_sc, dataMax, dataMin] = ...
    classificationScaling(double(data_train), [], [], typeNorm);

% Rescale accordingly all image pixels
% Note: the parameters used on the training pixels are given as arguments
% in the function to rescale accordingly the rest of the pixels
data_sc = classificationScaling(double(data), dataMax, dataMin, typeNorm);

% The same for the validation pixels
data_valid_sc = classificationScaling(double(data_valid), ...
    dataMax, dataMin, typeNorm);
